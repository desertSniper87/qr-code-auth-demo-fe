import { Handlers } from "$fresh/server.ts";

export const handler: Handlers = {
  GET() {
    const challenge = crypto.randomUUID();
    return new Response(JSON.stringify({ challenge }), {
      headers: { "Content-Type": "application/json" },
    });
  },
};


import { Handler } from "$fresh/server.ts";

const sockets = new Map();

export const handler: Handler = {
  GET(req) {
    const { socket, response } = Deno.upgradeWebSocket(req);

    socket.onopen = () => {
      console.log("WebSocket opened");
    };

    socket.onmessage = (e) => {
      const { challenge } = JSON.parse(e.data);
      sockets.set(challenge, socket);

      // Simulate verification after 5 seconds
      setTimeout(() => {
        const socket = sockets.get(challenge);
        if (socket) {
          const token = crypto.randomUUID();
          socket.send(JSON.stringify({ status: 'verified', token }));
          sockets.delete(challenge);
        }
      }, 5000);
    };

    socket.onclose = () => {
      console.log("WebSocket closed");
    };

    return response;
  },
};

// routes/dashboard.tsx
import { Handlers, PageProps } from "$fresh/server.ts";

export const handler: Handlers = {
  GET(req, ctx) {
    const authToken = req.headers.get("Authorization")?.split(" ")[1];
    if (authToken) {
      // In a real app, you'd validate the token here
      return ctx.render({ username: "User" });
    } else {
      const headers = new Headers();
      headers.set("Location", "/");
      return new Response(null, {
        status: 303,
        headers,
      });
    }
  },
};

export default function Dashboard({ data }: PageProps) {
  return (
    <div>
      <h1>Dashboard</h1>
      <p>Welcome to the protected dashboard, {data.username}!</p>
      <button onClick={() => {
        localStorage.removeItem('auth_token');
        window.location.href = '/';
      }}>Logout</button>
    </div>
  );
}
